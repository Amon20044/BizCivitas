<!-- Elementor Custom HTML Widget Code -->
<div class="blog-wrapper">
  <!-- Breadcrumb (visible only in detail view) -->
  <div class="breadcrumb hidden" id="breadcrumb">
    <a href="#" id="breadcrumb-link">Home</a> / Blog
  </div>

  <!-- Search and Filters (visible only in grid view) -->
  <div class="blog-controls" id="blog-controls">
    
    <div class="blog-filters">
      <button class="filter-btn active" data-filter="ALL">ALL</button>
      <button class="filter-btn" data-filter="Blogs">Blogs</button>
      <button class="filter-btn" data-filter="BizCivitas">BizCivitas</button>
      <button class="filter-btn" data-filter="Business Growth">Business Growth</button>
      <button class="filter-btn" data-filter="Business Travel">Business Travel</button>
      <button class="filter-btn" data-filter="Networking">Networking</button>
      <button class="filter-btn" data-filter="Tech">Tech</button>
      <button class="filter-btn" data-filter="Business">Business</button>
      <button class="filter-btn" data-filter="Marketing">Marketing</button>
      <button class="filter-btn" data-filter="Design">Design</button>
      <button class="filter-btn" data-filter="others">others</button>
    </div>
  </div>

  <!-- Main Content -->
  <div class="blog-content">
    <!-- Left: Blog Grid or Detail -->
    <div id="main-content" class="blog-grid"></div>

    <!-- Right: Recent Posts -->
    <div class="recent-posts">
        <div class="search-container">
      <input type="text" id="search-input" placeholder="Search blogs..." />
      <button id="search-clear" class="clear-btn hidden">×</button>
    </div>
      <h3>Recent posts</h3>
      <div id="recent-posts-container"></div>
      <div class="subscribe">
        <div class="search-container">
          <input type="text" id="subscribe-input" placeholder="Enter Your Mail" />
          <button id="subscribe-clear" class="clear-btn hidden">×</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination Controls (visible only in grid view) -->
  <div class="pagination-controls" id="pagination-controls">
    <button id="prev-page" disabled>Previous</button>
    <span id="page-number">Page 1</span>
    <button id="next-page">Next</button>
  </div>
</div>

<style>
html, body{
    overflow-x: hidden;
    max-width: 100%;
}
  body {
    font-family: 'Poppins', sans-serif;
  }

  .blog-wrapper {
    max-width: 1440px;
    margin: 0 auto;
    padding: 20px;
  }
.site-content
  .breadcrumb {
    margin-bottom: 20px;
    font-size: 14px;
    color: #666;
  }

  .breadcrumb a {
    color: #4a90e2;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .blog-controls {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
  }

  .search-container {
    display: flex;
    align-items: center;
    max-width: 400px;
  }

  #search-input, #subscribe-input {
    flex: 1;
    padding: 10px;
    border: 1px solid #B2B2B2;
    border-radius: 12px;
    font-size: 14px;
  }

  #search-clear, #subscribe-clear {
    margin-left: 10px;
    padding: 5px;
    border: none;
    background: none;
    font-size: 18px;
    cursor: pointer;
    color: #666;
  }

  #search-clear:hover, #subscribe-clear:hover {
    color: #4a90e2;
  }

  .clear-btn.hidden {
    display: none;
  }

  .blog-filters {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .filter-btn {
    padding: 5px 10px;
    border: 2px solid #8A8A8A;
    background: #fff;
    cursor: pointer;
    border-radius: 12px;
    font-size: 14px;
    transition: all 0.3s ease;
    width: 170px;
  }

  .filter-btn:hover, .filter-btn.active {
    background: #4A62AD;
    color: #fff;
    border-color: #4a62ad;
  }

  .blog-content {
    display: flex;
    gap: 20px;
  }

  .blog-grid {
    flex: 2;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }

  .blog-detail {
    flex: 2;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 13px;
    padding: 20px;
  }

  .blog-card {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 13px;
    overflow: hidden;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    padding: 8px;
    width: 100%;
  }

  .blog-card:hover {
    box-shadow: 0px 0px 8px 3px #F99D1C;
    transition: all 0.3s ease-in-out;
  }

  .content p {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    max-height: 10.5em;
  }

  .blog-card img, .blog-detail img {
    width: 100%;
    height: 250px;
    object-fit: cover;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    border-bottom-left-radius: 20px;
  }

  .blog-card .content, .blog-detail .content {
    padding: 15px;
  }

  .blog-card h3, .blog-detail h2 {
    font-size: 18px;
    margin: 10px 0;
    color: #20215B;
  }

  .blog-card p, .blog-detail p {
    font-size: 14px;
    color: #666;
    margin: 5px 0;
  }

  .blog-card .type-label, .blog-detail .type-label {
    font-weight: bold;
    color: #ffffff;
    font-size: 12px;
    margin-top: 10px;
    background-color: #000000;
    border-radius: 50px;
    padding: 3px 15px;
    max-height: 31px;
    border: 1.2px #000000 solid;
    display: inline-block;
  }

  .blog-card .read-more {
    color: #4a90e2;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    margin-top: 10px;
  }

  .recent-posts {
    flex: 1;
    background: #ffffff;
    border: 1px solid #eeeeee;
    padding: 20px;
    border-radius: 8px;
  }

  .recent-posts h3 {
    font-size: 16px;
    color: #1e1e1e;
    margin-bottom: 15px;
    text-decoration: underline;
  }

  .recent-post-card {
    display: flex;
    gap: 10px;
    margin-bottom: 30px;
    cursor: pointer;
    transition: all .1s;
  }
  .content{
          align-content: center;
  }

  .recent-post-card:hover img {
    scale: 110%;
    transition: all .1s;
  }

  .recent-post-card img {
    width: 92px;
    height: 92px;
    object-fit: cover;
    border-radius: 5px;
    transition: all .1s;
  }

  .recent-post-card .content {
    flex: 1;
  }

  .recent-post-card h4 {
    font-size: 14px;
    margin: 0 0 5px;
    color: #333;
  }

  .recent-post-card p {
    font-size: 12px;
    color: #666;
    margin: 0;
  }

  .pagination-controls {
    text-align: left;
    margin-top: 20px;
  }

  .pagination-controls button {
    padding: 10px 20px;
    border: 1px solid #ddd;
    background: #fff;
    cursor: pointer;
    border-radius: 5px;
    margin: 0 10px;
    font-size: 12px;
  }

  .pagination-controls button:disabled {
    background: #f0f0f0;
    cursor: not-allowed;
  }

  #page-number {
    color: #4a62ad;
    font-weight: 500;
  }

  .hori {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }

  .blog-card:hover svg {
    rotate: 45deg;
    transition: all 0.2s;
  }

  .blog-card:hover .hori div {
    background-color: #E19530;
    transition: all 0.2s;
  }

  .hori div {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #4A62AD;
    z-index: 2; /* Changed from 1 to 2 */
    position: relative; /* Add this to establish stacking context */
    width: 62px;
    height: 62px;
    border-radius: 9999px;
    transition: all 0.2s;
    translate: 20px -50px;
    border: 5px white solid;
}

.hori div::after {
    content: '';
    z-index:0; /* Changed from -100 to 1 (or even 0) */
    position: absolute;
    top: -30px;
    left:25px;
    width: 62px;
    height: 62px;
    background: radial-gradient(ellipse at top right, transparent 30%, #ffffff 30%);
    border-radius: 0 0 0 80px;
    transform: rotate(-90deg);
}

.hori div::before {
    content: '';
    z-index:1; /* Changed from -100 to 1 (or even 0) */
    position: absolute;
    top: 11px;
    left: -11px;
    width: 22px;
    height: 22px;
    background: radial-gradient(ellipse at top right, transparent 30%, #ffffff 30%);
    border-radius: 0 0 0 80px;
    transform: rotate(270deg);
}
  .hori div a svg path {
    stroke: white;
  }

  .blog-detail img {
    width: 100%;
    border-radius: 16px;
    margin-bottom: 20px;
  }

  .blog-detail #content-text {
    margin-top: 20px;
    line-height: 1.6;
  }

  .hidden {
    display: none;
  }

  @media screen and (min-width: 48em) {
    .inner-wrap {
      max-width: 1440px !important;
    }
  }

  @media (max-width: 768px) {
    .blog-content {
      flex-direction: column;
    }

    .blog-grid, .blog-detail {
      grid-template-columns: 1fr;
      width: 100%;
    }

    .recent-posts {
      width: 100%;
    }

    .search-container {
      max-width: 100%;
    }

    .blog-detail img {
      width: 100%;
    }
    .filter-btn {
    width: 147px;
    overflow: hidden;
   font-size: 11px;
}
  }
</style>

<script type="module">
  // Supabase configuration
  const SUPABASE_URL = 'https://vxgwzfourhzoxwejijxl.supabase.co';
  const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ4Z3d6Zm91cmh6b3h3ZWppanhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgxMDAzNzEsImV4cCI6MjA2MzY3NjM3MX0.CcSPEYkbp9gXmCXGOrr0STqh88pfE_1j5U6zBkaTZeU';

  // Import Supabase client
  const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

  const mainContent = document.getElementById('main-content');
  const recentPostsContainer = document.getElementById('recent-posts-container');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  const pageNumberDisplay = document.getElementById('page-number');
  const filterButtons = document.querySelectorAll('.filter-btn');
  const searchInput = document.getElementById('search-input');
  const searchClearBtn = document.getElementById('search-clear');
  const breadcrumb = document.getElementById('breadcrumb');
  const blogControls = document.getElementById('blog-controls');
  const paginationControls = document.getElementById('pagination-controls');
  const breadcrumbLink = document.getElementById('breadcrumb-link');

  let currentPage = 1;
  let currentFilter = 'ALL';
  let currentSearch = '';
  const pageSize = 8;
  let currentView = 'grid';
  let currentBlogId = null;

  // Fetch blogs based on filter, search, and page
  async function fetchBlogs(page = 1, filter = 'ALL', search = '') {
    const from = (page - 1) * pageSize;
    const to = from + pageSize - 1;

    let query = supabase
      .from('blogs')
      .select('*')
      .order('created_at', { ascending: false });

    if (filter !== 'ALL') {
      query = query.eq('type_of_topic', filter);
    }

    if (search) {
      query = query.or(
        `topic_name.ilike.%${search}%,description.ilike.%${search}%,content.ilike.%${search}%`
      );
    }

    const { data, error } = await query.range(from, to);

    if (error) {
      mainContent.innerHTML = `<p>Error loading blogs.</p>`;
      console.error(error);
      return [];
    }

    // Update pagination buttons
    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = data.length < pageSize;

    renderBlogs(data);
    return data;
  }

  // Fetch single blog
  async function fetchBlog(id) {
    const { data, error } = await supabase
      .from('blogs')
      .select('*')
      .eq('id', id)
      .single();

    if (error || !data) {
      mainContent.innerHTML = `<p>Error loading blog or blog not found.</p>`;
      console.error(error);
      return null;
    }

    renderBlog(data);
    return data;
  }

  // Fetch recent posts (top 5)
  async function fetchRecentPosts() {
    const { data, error } = await supabase
      .from('blogs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) {
      recentPostsContainer.innerHTML = `<p>Error loading recent posts.</p>`;
      console.error(error);
      return;
    }

    renderRecentPosts(data);
  }

  // Render main blog cards
  function renderBlogs(blogs) {
    mainContent.className = 'blog-grid';
    mainContent.innerHTML = '';
    if (blogs.length === 0) {
      mainContent.innerHTML = `<p>No blogs found.</p>`;
      return;
    }
    blogs.forEach(blog => {
      const card = document.createElement('div');
      card.className = 'blog-card';
      card.innerHTML = `
        <img src="${blog.cover_url}" alt="Cover Image" />
        <div class="content">
          <div class="hori">
            <p class="type-label">${blog.type_of_topic}</p>
            <div class="icon">
              <a href="?id=${blog.id}" class="read-more iconBox">
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M16.7714 16.7702V1.30797M16.7714 1.30797H1.30922M16.7714 1.30797L1.30922 16.7702" stroke="#4A90E2" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </a>
            </div>
          </div>
          <h3>${blog.topic_name}</h3>
          <p>${blog.description}</p>
          <hr/>
          <p>By ${blog.author_name} on ${new Date(blog.date).toLocaleDateString()}</p>
        </div>
      `;
      card.addEventListener('click', (e) => {
        e.preventDefault();
        currentView = 'detail';
        currentBlogId = blog.id;
        history.pushState({ view: 'detail', blogId: blog.id }, '', `?id=${blog.id}`);
        fetchBlog(blog.id);
        updateView();
      });
      mainContent.appendChild(card);
    });
  }

  // Render single blog
  function renderBlog(blog) {
    mainContent.className = 'blog-detail';
    mainContent.innerHTML = `
      <img id="blog-cover" src="${blog.cover_url}" alt="Cover Image" />
      <div class="type-label">${blog.type_of_topic}</div>
      <h2>${blog.topic_name}</h2>
      <p>By ${blog.author_name} on ${new Date(blog.date).toLocaleDateString()}</p>
      <p>${blog.description}</p>
      <div id="content-text">${blog.content}</div>
    `;
  }

  // Render recent posts
  function renderRecentPosts(posts) {
    recentPostsContainer.innerHTML = '';
    posts.forEach(post => {
      const card = document.createElement('div');
      card.className = 'recent-post-card';
      card.innerHTML = `
        <img src="${post.cover_url}" alt="Cover Image" />
        <div class="content">
          <h4>${post.topic_name}</h4>
          <p>By ${post.author_name} on ${new Date(post.date).toLocaleDateString()}</p>
        </div>
      `;
      card.addEventListener('click', (e) => {
        e.preventDefault();
        currentView = 'detail';
        currentBlogId = post.id;
        history.pushState({ view: 'detail', blogId: post.id }, '', `?id=${post.id}`);
        fetchBlog(post.id);
        updateView();
      });
      recentPostsContainer.appendChild(card);
    });
  }

  // Update view based on current state
  function updateView() {
    breadcrumb.classList.toggle('hidden', currentView === 'grid');
    blogControls.classList.toggle('hidden', currentView === 'detail');
    paginationControls.classList.toggle('hidden', currentView === 'detail');
  }

  // Filter buttons
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      currentFilter = button.dataset.filter;
      currentPage = 1;
      pageNumberDisplay.textContent = `Page ${currentPage}`;
      fetchBlogs(currentPage, currentFilter, currentSearch);
    });
  });

  // Search input handling
  searchInput.addEventListener('input', () => {
    currentSearch = searchInput.value.trim();
    searchClearBtn.classList.toggle('hidden', !currentSearch);
    currentPage = 1;
    pageNumberDisplay.textContent = `Page ${currentPage}`;
    fetchBlogs(currentPage, currentFilter, currentSearch);
  });

  // Clear search button
  searchClearBtn.addEventListener('click', () => {
    searchInput.value = '';
    currentSearch = '';
    searchClearBtn.classList.add('hidden');
    currentPage = 1;
    pageNumberDisplay.textContent = `Page ${currentPage}`;
    fetchBlogs(currentPage, currentFilter, currentSearch);
  });

  // Breadcrumb navigation
  breadcrumbLink.addEventListener('click', (e) => {
    e.preventDefault();
    currentView = 'grid';
    currentBlogId = null;
    history.pushState({ view: 'grid' }, '', window.location.pathname);
    fetchBlogs(currentPage, currentFilter, currentSearch);
    updateView();
  });

  // Handle popstate for navigation
  window.addEventListener('popstate', (event) => {
    if (event.state && event.state.view === 'detail' && event.state.blogId) {
      currentView = 'detail';
      currentBlogId = event.state.blogId;
      fetchBlog(event.state.blogId);
    } else {
      currentView = 'grid';
      currentBlogId = null;
      fetchBlogs(currentPage, currentFilter, currentSearch);
    }
    updateView();
  });

  // Pagination controls
  prevPageBtn.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      pageNumberDisplay.textContent = `Page ${currentPage}`;
      fetchBlogs(currentPage, currentFilter, currentSearch);
    }
  });

  nextPageBtn.addEventListener('click', () => {
    currentPage++;
    pageNumberDisplay.textContent = `Page ${currentPage}`;
    fetchBlogs(currentPage, currentFilter, currentSearch);
  });

  // Initial load based on URL
  const urlParams = new URLSearchParams(window.location.search);
  const blogId = urlParams.get('id');
  if (blogId) {
    currentView = 'detail';
    currentBlogId = blogId;
    fetchBlog(blogId);
  } else {
    currentView = 'grid';
    fetchBlogs(currentPage, currentFilter, currentSearch);
  }
  fetchRecentPosts();
  updateView();
</script>