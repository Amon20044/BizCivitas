-- Clean Database Schema
-- Drop existing tables and types if they exist
DO $block$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'DROP TABLE IF EXISTS public.' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END$block$;

DROP TYPE IF EXISTS member_position CASCADE;
DROP TYPE IF EXISTS topic_type CASCADE;
DROP TYPE IF EXISTS event_type CASCADE;

-- Create enum types
CREATE TYPE member_position AS ENUM (
    'Founder',
    'Co-Founders', 
    'Consulting Directors',
    'Core-Team-Members',
    'Team-Member'
);

CREATE TYPE topic_type AS ENUM (
    'Blogs',
    'BizCivitas',
    'Business Travel',
    'Networking',
    'Tech',
    'Business',
    'Marketing',
    'Design',
    'others'
);

CREATE TYPE event_type AS ENUM (
    'featured',
    'upcoming',
    'past'
);


-- Teams Table
CREATE TABLE public.teams (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    slug TEXT UNIQUE NOT NULL,
    img_url TEXT NOT NULL,
    name VARCHAR(255) NOT NULL,
    designation VARCHAR(255) NOT NULL,
    website_link TEXT,
    linkedin_link TEXT,
    company_logo_url TEXT,
    company_name VARCHAR(255),
    description TEXT,
    leading_in_domain VARCHAR(255),
    position member_position,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Blogs Table
CREATE TABLE public.blogs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    slug TEXT UNIQUE NOT NULL,
    cover_url TEXT,
    author_name VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    topic_name VARCHAR(255) NOT NULL UNIQUE,
    type_of_topic topic_type DEFAULT 'others',
    description TEXT,
    content TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Events Table
CREATE TABLE public.events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    slug TEXT UNIQUE NOT NULL,
    date DATE NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    location VARCHAR(255),
    cover_url TEXT,
    description TEXT,
    type event_type DEFAULT 'upcoming',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Admin Users Table
CREATE TABLE public.admin_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    name VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_login TIMESTAMP WITH TIME ZONE
);

SELECT generate_slug('This is My Blog!!');  -- Expected: 'this-is-my-blog'
SELECT generate_slug('  Hello   World  ');   -- Expected: 'hello-world'
SELECT generate_slug('Test@#$%^&*()');       -- Expected: 'test'
SELECT generate_slug('');                    -- Expected: '' (empty string)
SELECT generate_slug(NULL);                  -- Expected: NULL
SELECT generate_slug('Café München');        -- Expected: 'caf-mnchen' (non-ASCII characters replaced)

CREATE OR REPLACE FUNCTION generate_slug(input_text TEXT)
RETURNS TEXT AS $func$
DECLARE
    cleaned_text TEXT;
BEGIN
    -- Step 1: Handle NULL or empty input
    IF input_text IS NULL OR TRIM(input_text) = '' THEN
        RAISE NOTICE 'generate_slug: Input is NULL or empty, returning NULL';
        RETURN NULL; -- Or return a default value like 'default-slug' if desired
    END IF;

    -- Step 2: Trim whitespace and convert to lowercase
    cleaned_text := LOWER(TRIM(input_text));
    RAISE NOTICE 'generate_slug: After trim and lowercase: %', cleaned_text;

    -- Step 3: Transliterate non-ASCII characters (requires unaccent extension)
    -- Uncomment if unaccent is installed
    -- cleaned_text := unaccent(cleaned_text);
    -- RAISE NOTICE 'generate_slug: After unaccent: %', cleaned_text;

    -- Step 4: Replace all non-alphanumeric characters with a hyphen
    cleaned_text := REGEXP_REPLACE(cleaned_text, '[^a-z0-9]+', '-', 'g');
    RAISE NOTICE 'generate_slug: After replacing non-alphanumeric: %', cleaned_text;

    -- Step 5: Collapse multiple hyphens into a single hyphen
    cleaned_text := REGEXP_REPLACE(cleaned_text, '-+', '-', 'g');
    RAISE NOTICE 'generate_slug: After collapsing hyphens: %', cleaned_text;

    -- Step 6: Trim leading and trailing hyphens
    cleaned_text := TRIM(BOTH '-' FROM cleaned_text);
    RAISE NOTICE 'generate_slug: After trimming hyphens: %', cleaned_text;

    -- Step 7: Limit length to 100 characters
    cleaned_text := LEFT(cleaned_text, 100);
    RAISE NOTICE 'generate_slug: After limiting length: %', cleaned_text;

    -- Step 8: Final check for empty result
    IF cleaned_text = '' THEN
        RAISE NOTICE 'generate_slug: Final result is empty, returning NULL';
        RETURN NULL; -- Or return a default value
    END IF;

    RETURN cleaned_text;
END;
$func$ LANGUAGE plpgsql IMMUTABLE;

-- Trigger Functions
CREATE OR REPLACE FUNCTION set_slug_from_name()
RETURNS TRIGGER AS $func$
BEGIN
    NEW.slug := generate_slug(NEW.name);
    RETURN NEW;
END;
$func$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION set_slug_from_topic()
RETURNS TRIGGER AS $func$
BEGIN
    NEW.slug := generate_slug(NEW.topic_name);
    RETURN NEW;
END;
$func$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION set_slug_from_event()
RETURNS TRIGGER AS $func$
BEGIN
    NEW.slug := generate_slug(NEW.event_name);
    RETURN NEW;
END;
$func$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_event_type()
RETURNS TRIGGER AS $func$
BEGIN
    IF NEW.type = 'featured' THEN
        RETURN NEW;
    ELSIF NEW.date < CURRENT_DATE THEN
        NEW.type := 'past';
    ELSE
        NEW.type := 'upcoming';
    END IF;
    RETURN NEW;
END;
$func$ LANGUAGE plpgsql;

-- Create Triggers
-- Teams triggers
CREATE TRIGGER trigger_teams_slug
    BEFORE INSERT OR UPDATE ON public.teams
    FOR EACH ROW
    EXECUTE FUNCTION set_slug_from_name();

CREATE TRIGGER trigger_teams_updated_at
    BEFORE UPDATE ON public.teams
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Blogs triggers
CREATE TRIGGER trigger_blogs_slug
    BEFORE INSERT OR UPDATE ON public.blogs
    FOR EACH ROW
    EXECUTE FUNCTION set_slug_from_topic();

CREATE TRIGGER trigger_blogs_updated_at
    BEFORE UPDATE ON public.blogs
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Events triggers
CREATE TRIGGER trigger_events_slug
    BEFORE INSERT OR UPDATE ON public.events
    FOR EACH ROW
    EXECUTE FUNCTION set_slug_from_event();

CREATE TRIGGER trigger_events_type
    BEFORE INSERT OR UPDATE ON public.events
    FOR EACH ROW
    EXECUTE FUNCTION update_event_type();

CREATE TRIGGER trigger_events_updated_at
    BEFORE UPDATE ON public.events
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Performance Indexes
-- Teams indexes
CREATE INDEX idx_teams_slug ON public.teams(slug);
CREATE INDEX idx_teams_company_name ON public.teams(company_name);
CREATE INDEX idx_teams_position ON public.teams(position);
CREATE INDEX idx_teams_created_at ON public.teams(created_at DESC);

-- Blogs indexes
CREATE INDEX idx_blogs_slug ON public.blogs(slug);
CREATE INDEX idx_blogs_date ON public.blogs(date DESC);
CREATE INDEX idx_blogs_topic_type ON public.blogs(type_of_topic);
CREATE INDEX idx_blogs_author ON public.blogs(author_name);
CREATE INDEX idx_blogs_created_at ON public.blogs(created_at DESC);

-- Events indexes
CREATE INDEX idx_events_slug ON public.events(slug);
CREATE INDEX idx_events_date ON public.events(date DESC);
CREATE INDEX idx_events_type ON public.events(type);  
CREATE INDEX idx_events_location ON public.events(location);
CREATE INDEX idx_events_created_at ON public.events(created_at DESC);

-- Admin users indexes
CREATE INDEX idx_admin_users_email ON public.admin_users(email);

-- Disable Row Level Security
ALTER TABLE public.teams DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.blogs DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.events DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.admin_users DISABLE ROW LEVEL SECURITY;

-- Sample Data
INSERT INTO public.admin_users (email, password_hash, name) VALUES 
('admin@cms.com', '$2a$10$example_hash', 'Admin User');

-- Sample teams data
INSERT INTO public.teams (img_url, name, designation, website_link, linkedin_link, company_logo_url, company_name, description, leading_in_domain, position) VALUES
('https://example.com/john.jpg', 'John Doe', 'CEO', 'https://johndoe.com', 'https://linkedin.com/in/johndoe', 'https://example.com/logo.png', 'TechCorp', 'Visionary leader in tech innovation.', 'Technology', 'Founder'),
('https://example.com/jane.jpg', 'Jane Smith', 'CTO', 'https://janesmith.io', 'https://linkedin.com/in/janesmith', 'https://example.com/logo.png', 'TechCorp', 'Expert in scalable cloud systems.', 'Engineering', 'Co-Founders');

-- Sample blogs data  
INSERT INTO public.blogs (cover_url, author_name, date, topic_name, type_of_topic, description, content) VALUES
('https://example.com/startup.jpg', 'John Doe', '2024-01-10', 'Scaling Startups', 'Business', 'How to scale your startup effectively.', 'Detailed guide on startup scaling strategies...'),
('https://example.com/cloud.jpg', 'Jane Smith', '2024-02-15', 'Cloud Architecture', 'Tech', 'Best practices for cloud systems.', 'In-depth look at cloud infrastructure...');

-- Sample events data
INSERT INTO public.events (date, event_name, location, cover_url, description, type) VALUES
('2024-01-15', 'Tech Summit 2024', 'San Francisco, CA', 'https://example.com/summit.jpg', 'Annual tech innovation summit.', 'past'),
('2025-06-05', 'Tech Innovators Meetup', 'Austin, TX', 'https://example.com/meetup.jpg', 'Network with tech leaders.', 'upcoming'),
('2025-01-10', 'Featured Conference', 'New York, NY', 'https://example.com/featured.jpg', 'Premier industry conference.', 'featured');