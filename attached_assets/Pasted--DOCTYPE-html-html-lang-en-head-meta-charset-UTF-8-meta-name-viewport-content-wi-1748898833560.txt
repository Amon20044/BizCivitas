<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Events Page - Enhanced Design</title>
  <style>
    /* ... Your existing CSS ... */
    body {
      font-family: 'Poppins', Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f0f2f5;
    }
    .videoWrapper {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      height: 60vh;
      transform: scaleX(1.2);
    }
    .videoWrapper video {
      position: absolute;
      width: 100vw;
      height: 50vh;
      object-fit: cover;
    }
    video::-webkit-media-controls {
      display: none;
    }
    #app h2 {
      background: #E6E6E6;
      width: 100%;
      color: #000000;
      border: none;
      font-size: 20px;
      padding: 8px;
    }
    .container {
      max-width: 100vw;
      margin: 0 auto;
      padding: 20px;
    }
    h2 {
      font-size: 28px;
      font-weight: 600;
      margin-bottom: 30px;
      color: #2c3e50;
      text-align: center;
      border-bottom: 2px solid #28a745;
      display: inline-block;
      padding-bottom: 5px;
    }
    /* Event Card Styling */
    .event-card {
      display: flex;
      background-color: #ffffff;
      border-radius: 24px;
      margin-bottom: 20px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      position: relative;
      cursor: pointer;
      padding: 24px;
      border: 3px solid #e6e6e6;
    }
    .event-card:hover {
      transform: scale(1.02);
      box-shadow: 0px 6px 6px rgba(0, 0, 0, 0.25);
      background-color: #333333;
      color: #fff;
      border: none;
    }
    .event-card:hover::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.1);
      z-index: 1;
      transition: background-color 0.3s ease;
    }
    .event-image {
      flex: 0 0 480px;
      background-size: cover;
      background-position: center;
      min-height: 150px;
    }
    .event-content {
      flex: 1;
      padding: 20px;
      position: relative;
      z-index: 2;
    }
    .event-date {
      font-size: 14px;
      color: #7f8c8d;
      font-weight: 500;
      margin-bottom: 5px;
    }
    .event-name {
      font-size: 26px;
      font-weight: 600;
      color: #28a745;
      margin: 0 0 8px;
    }
    .event-location {
      font-size: 16px;
      color: #34495e;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }
    .event-location::before {
      content: "üìç";
      margin-right: 5px;
    }
    .event-description {
      font-size: 14px;
      color: #5c6b73;
      line-height: 1.6;
    }
    /* Breadcrumb Styling */
    /* Breadcrumb Styling */
    .breadcrumb {
        display: flex;
        align-items: center;
        justify-content: center;
      padding: 40px 40px;
      font-size: 16px;
      color: white;
        background-color: #50C26F;
      border-radius: 5px;
      margin-bottom: 10px;
      height: 192px;
    }
    .breadcrumb a {
      color: white;
      background-color: #35467B;
      padding: 4px 16px;
      border-radius: 999px;
      text-decoration: underline;
      transition: color 0.3s ease;
      cursor: pointer;
    }
    .breadcrumb a:hover {
      color: #211838;
      background-color: #216838;
      
      transition: all 0.3s ease;
    }
    .breadcrumb span {
      margin: 0 5px;
      color:  #ffffff;
    }
    /* Event Details Styling with Banner */
    .event-details {
      background-color: #ffffff;
      border-radius: 12px;
      margin-bottom: 20px;
      overflow: hidden;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }
    .event-details-banner {
      position: relative;
      width: 100%;
      min-height: 400px;
      background-size: cover;
      background-position: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      color: #fff;
    }
    .event-details-banner::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
      z-index: 1;
    }
    .event-details-banner-content {
      position: relative;
      z-index: 2;
      padding: 20px;
    }
    .event-details-banner h3 {
      font-size: 3rem;
      font-weight: 700;
      color: #f5a623;
      text-transform: uppercase;
      margin-bottom: 10px;
      letter-spacing: 2px;
    }
    .event-details-banner h3 span {
      display: block;
      font-size: 2rem;
      color: #fff;
      margin-top: 5px;
    }
    .event-details-banner .date-location {
      font-size: 1.2rem;
      color: #ddd;
      margin-top: 15px;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 5px 15px;
      border-radius: 5px;
      display: inline-block;
    }
    .event-details-content {
      padding: 30px;
    }
    .event-details-content p {
      font-size: 16px;
      color: #34495e;
      margin-bottom: 10px;
    }
    .event-details-content .description {
      font-size: 1rem;
      color: #5c6b73;
      line-height: 1.6;
      margin-bottom: 20px;
    }
    .event-details-content .back-button {
      display: inline-block;
      padding: 10px 20px;
      background-color: #28a745;
      color: #ffffff;
      border: none;
      border-radius: 5px;
      margin-top: 20px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      font-size: 16px;
    }
    .event-details-content .back-button:hover {
      background-color: #218838;
    }
    /* Carousel Styling */
    .event-carousel {
      margin: 20px 0;
      position: relative;
      overflow: hidden;
      width: 100%;
      border-radius: 12px;
      height: 85vh; /* Consistent height */
    }
    .carousel-container {
      display: flex;
      transition: transform 0.5s ease-in-out;
      width: 100%;
      height: 100%; /* Ensure container takes full height */
    }
    .carousel-image {
      width: 100%; /* Adjusted to fit container */
      height: 100%; /* Consistent height */
      object-fit: cover;
      border-radius: 12px;
      flex: 0 0 100%;
      display: block;
      cursor: pointer;
    }
    .carousel-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background-color: rgba(0, 0, 0, 0.5);
      color: white;
      border: none;
      padding: 10px; /* Adjusted padding for rounder look */
      width: 40px; /* Fixed width */
      height: 40px; /* Fixed height */
      cursor: pointer;
      font-size: 24px; /* Larger icon */
      line-height: 1; /* Center icon */
      border-radius: 50%;
      z-index: 10;
      transition: background-color 0.3s ease;
      display: flex; /* For centering icon */
      align-items: center; /* For centering icon */
      justify-content: center; /* For centering icon */
    }
    .carousel-button:hover {
      background-color: rgba(0, 0, 0, 0.8);
    }
    .carousel-button.prev {
      left: 10px;
    }
    .carousel-button.next {
      right: 10px;
    }
    /* Carousel Controls (Thumbnails and Autoplay Button) */
    .carousel-controls {
      display: flex;
      justify-content: space-between; /* Pushes thumbnails left, button right */
      align-items: center; /* Vertically align items */
      margin-top: 10px;
    }
    .carousel-thumbnails {
      display: flex;
      flex-direction: row;
      gap: 10px;
      /* width: 300px; Remove fixed width or adjust based on preference */
      max-height: 60px; /* Adjusted for a single row of thumbnails */
      overflow-x: auto; /* Allow horizontal scrolling if many thumbnails */
      overflow-y: hidden;
      padding-bottom: 5px; /* Space for scrollbar if it appears */
    }
    .thumbnail {
      width: 80px;
      height: 50px;
      object-fit: cover;
      border-radius: 5px;
      cursor: pointer;
      border: 2px solid #e6e6e6;
      transition: border-color 0.3s ease, transform 0.3s ease;
      flex-shrink: 0; /* Prevent thumbnails from shrinking */
    }
    .thumbnail:hover {
      border-color: #28a745;
      transform: scale(1.1);
    }
    .thumbnail.active {
      border-color: #28a745;
      transform: scale(1.1);
    }
    .autoplay-button {
      display: flex;
      align-items: center;
      justify-content: center;
      color: #ffffff; /* Icon color */
      background-color: #28a745; /* Default: Play is active, so button is green */
      border: none;
      border-radius: 50%;
      cursor: pointer;
      transition: background-color 0.3s ease;
      width: 40px; /* Fixed size */
      height: 40px; /* Fixed size */
      padding: 0; /* Remove padding if icons are sized correctly */
    }
     .autoplay-button svg { /* Ensure SVGs fill the button */
        width: 20px; /* Adjust icon size as needed */
        height: 20px; /* Adjust icon size as needed */
        fill: currentColor; /* Use button's color for icon */
    }
    .autoplay-button.paused { /* When autoplay is paused, button indicates "play" action */
      background-color: #dc2626; /* Red for paused state (play action) */
    }
    .autoplay-button:hover {
      background-color: #218838; /* Darker green on hover */
    }
    .autoplay-button.paused:hover {
      background-color: #c82333; /* Darker red on hover */
    }
    /* Fullscreen Image Overlay */
    .fullscreen-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      display: none; /* Initially hidden */
    }
    .fullscreen-image {
      max-width: 90%;
      max-height: 90%;
      object-fit: contain;
      position:fixed;
    }
    .close-button {
      position: absolute;
      top: 20px;
      right: 30px; /* Adjusted for better visibility */
      background-color: transparent;
      border: none;
      color: #ffffff;
      font-size: 36px; /* Larger close icon */
      cursor: pointer;
    }
    /* YouTube Videos Styling */
    .event-youtube {
      margin-top: 30px;
    }
    .event-youtube h3 {
      font-size: 1.5rem;
      color: #2c3e50;
      margin-bottom: 15px;
    }
    .youtube-videos {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }
    .youtube-video {
      width: 100%;
      max-width: 560px;
      height: 315px;
      border-radius: 8px;
      border: none;
      /* display: block; Not needed for iframe */
      /* object-fit: cover; Not applicable for iframe */
    }
    /* Full-Screen Video Styling */
    .fullscreen-video { /* This is for the banner video */
      width: 100vw;
      height: 100vh; /* Should match videoWrapper height or be adjusted */
      border: none;
      display: block;
      object-fit: cover;
      /* position: relative; Not needed if parent is videoWrapper */
      /* top: 0; */
      /* left: 0; */
    }
    /* Error Message */
    .error-message {
      text-align: center;
      color: #dc2626;
      font-size: 16px;
      padding: 20px;
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin: 20px 0;
    }
    /* Section Styling */
    .upcoming-events, .past-events {
      margin-bottom: 40px;
    }
    .upcoming-events h2, .past-events h2 { /* These are h2s inside the sections, not the main H2s */
      color: #2c3e50;
      /* Styling for section H2s if needed, different from main H2 */
    }
    /* Responsive Design */
    @media (max-width: 768px) {
      .event-card {
        flex-direction: column;
      }
      .event-image {
        flex: none; /* Reset flex behavior */
        width: 100%;
        height: 200px; /* Fixed height for mobile images */
        min-height: auto; /* Override min-height */
      }
      .event-content {
        padding: 15px;
      }
      .event-details-banner {
        min-height: 300px;
      }
      .event-details-banner h3 {
        font-size: 2rem;
      }
      .event-details-banner h3 span {
        font-size: 1.5rem;
      }
      .event-details-banner .date-location {
        font-size: 1rem;
      }
      .event-details-content {
        padding: 20px;
      }
      .event-carousel {
        height: 250px; /* Adjusted for smaller screens */
      }
      .carousel-container {
        height: 100%; /* Child takes full height of parent */
      }
      .carousel-image {
        height: 100%; /* Child takes full height of parent */
      }
      .thumbnail {
        width: 60px;
        height: 40px;
      }
      .carousel-thumbnails {
        max-height: 50px; /* Adjusted */
      }
      .youtube-video {
        /* max-width: 100%; default for block */
        height: 200px; /* Or calculate aspect ratio */
      }
      .videoWrapper { /* Banner video wrapper */
        height: 50vh; /* Or other desired height */
      }
      .videoWrapper video { /* Banner video */
        height: 100%; /* Fill its wrapper */
      }
    }
  </style>
</head>
<body>
  <div class="container" id="app">
    </div>

  <script type="module">
    // Supabase client setup
    import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

    const SUPABASE_URL = 'https://vxgwzfourhzoxwejijxl.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ4Z3d6Zm91cmh6b3h3ZWppanhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgxMDAzNzEsImV4cCI6MjA2MzY3NjM3MX0.CcSPEYkbp9gXmCXGOrr0STqh88pfE_1j5U6zBkaTZeU';
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    const appContainer = document.getElementById('app');
    let eventsData = null;

    async function fetchEventsData() {
      if (eventsData) {
        // console.log('Using cached events data');
        return eventsData;
      }
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .order('date', { ascending: true });
      if (error) {
        console.error('Error fetching events:', error);
        throw error;
      }
      eventsData = data;
      // console.log('Fetched and stored events data:', eventsData);
      return eventsData;
    }
    

    function router() {
      const path = window.location.pathname;
      if (path.startsWith('/event/')) {
        const eventId = path.split('/event/')[1];
        renderEventDetails(eventId);
      } else {
        renderEventsList();
      }
    }

    async function renderEventsList() {
      let data;
      try {
        data = await fetchEventsData();
      } catch (error) {
        appContainer.innerHTML = '<p class="error-message">Error loading events. Please try again later.</p>';
        return;
      }

      const upcomingEvents = data.filter(event => event.type === 'upcoming' || event.type === 'featured');
      const pastEvents = data.filter(event => event.type === 'past');
      const videoUrl = 'http://deeppink-starling-710457.hostingersite.com/wp-content/uploads/2025/05/Think-your-next-big-idea-is-stuck-in-a-boardroom_-Think-again.-_airbnb-_uber-_solarcity-_business1080P_HD.mp4';

      let html = `
        <div class="videoWrapper">
          <video
            class="fullscreen-video" 
            src="${videoUrl}"
            autoplay
            muted
            loop
            playsinline
            controlsList="nodownload nofullscreen noremoteplayback" 
            disablePictureInPicture
            preload="auto" 
            onerror="console.error('Video failed to load: ${videoUrl}');"
          ></video>
        </div>
        <h2>Upcoming Events</h2>
        <div class="upcoming-events" id="upcoming-events">
          ${upcomingEvents.length === 0 ? '<p class="error-message">No upcoming events available.</p>' : ''}
        </div>
        <h2>Past Events</h2>
        <div class="past-events" id="past-events">
          ${pastEvents.length === 0 ? '<p class="error-message">No past events available.</p>' : ''}
        </div>
      `;
      appContainer.innerHTML = html;

      const upcomingContainer = document.getElementById('upcoming-events');
      upcomingEvents.forEach(event => renderEventCard(event, upcomingContainer));

      const pastContainer = document.getElementById('past-events');
      pastEvents.forEach(event => renderEventCard(event, pastContainer));
    }
    
    function renderEventCard(event, container) {
        const eventCard = document.createElement('div');
        eventCard.className = 'event-card';
        eventCard.innerHTML = `
          <div class="event-image" style="background-image: url('${event.cover_url || 'https://via.placeholder.com/480x260?text=Event+Image'}');"></div>
          <div class="event-content">
            <div class="event-date">${new Date(event.date).toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric', year: 'numeric' })}</div>
            <div class="event-name">${event.event_name || 'Untitled Event'}</div>
            <div class="event-location">${event.location || 'Location TBD'}</div>
            <div class="event-description">${(event.description || 'No description available.').substring(0,150)}${(event.description || '').length > 150 ? '...' : ''}</div>
          </div>
        `;
        eventCard.addEventListener('click', () => {
          history.pushState({ eventId: event.id }, '', `/event/${event.id}`);
          router();
        });
        container.appendChild(eventCard);
    }

    async function renderEventDetails(eventId) {
      // --- BEGIN Clean up previous carousel instance for this eventId ---
      if (carouselStates[eventId] && carouselStates[eventId].current && carouselStates[eventId].current.autoSwipeInterval !== null) {
        // console.log(`[${eventId}] renderEventDetails: Cleaning up old interval ${carouselStates[eventId].current.autoSwipeInterval}`);
        clearInterval(carouselStates[eventId].current.autoSwipeInterval);
        carouselStates[eventId].current.autoSwipeInterval = null; // Mark as cleared in old state
      }
      // delete carouselStates[eventId]; // Optional: completely remove old state. InitializeCarousel will overwrite anyway.
      // --- END Clean up ---

      let data;
      try {
        data = await fetchEventsData();
      } catch (error) {
        appContainer.innerHTML = '<p class="error-message">Error loading event details. Please try again later.</p>';
        return;
      }

      const event = data.find(e => e.id.toString() === eventId);
      if (!event) {
        console.error('Event not found:', eventId);
        appContainer.innerHTML = '<p class="error-message">Event not found.</p>';
        return;
      }

      const parseUrls = (field) => {
        if (!field) return [];
        try {
          let parsed = field;
          if (typeof field === 'string' && field.startsWith('[') && field.endsWith(']')) {
            parsed = JSON.parse(field);
          }
          if (Array.isArray(parsed)) {
            return parsed.filter(url => typeof url === 'string' && url.trim() !== '');
          }
          return typeof field === 'string' ? [field.trim()].filter(Boolean) : [];
        } catch (e) {
          console.error('Error parsing field:', field, e);
          if (typeof field === 'string') {
            return field.split(',').map(url => url.trim()).filter(Boolean);
          }
          return [];
        }
      };

      const images = parseUrls(event.image_urls);
      const youtubeLinks = parseUrls(event.youtube_links);

      const carouselHtml = images.length > 0
        ? `
          <div class="event-carousel" id="event-carousel-${eventId}">
            <div class="carousel-container" id="carousel-container-${eventId}">
              ${images.map((url, index) => `<img src="${url}" alt="Event Image ${index + 1}" class="carousel-image" data-index="${index}" onerror="this.src='https://via.placeholder.com/800x400?text=Image+Not+Found'; console.error('Image failed to load: ${url}');">`).join('')}
            </div>
            ${images.length > 1 ? `
            <button class="carousel-button prev" onclick="moveCarousel('${eventId}', -1)">‚ùÆ</button>
            <button class="carousel-button next" onclick="moveCarousel('${eventId}', 1)">‚ùØ</button>
            ` : ''}
          </div>
          <div class="carousel-controls">
            <div class="carousel-thumbnails" id="carousel-thumbnails-${eventId}">
              ${images.map((url, index) => `<img src="${url}" alt="Thumbnail ${index + 1}" class="thumbnail ${index === 0 ? 'active' : ''}" onclick="navigateToImage('${eventId}', ${index})" onerror="this.src='https://via.placeholder.com/80x50?text=Thumb+Not+Found'; console.error('Thumbnail failed to load: ${url}');">`).join('')}
            </div>
            ${images.length > 1 ? `
            <button class="autoplay-button" id="autoplay-button-${eventId}" onclick="toggleAutoplay('${eventId}')" title="Toggle Autoplay">
                <svg class="play-icon" style="display: none;" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                <svg class="pause-icon" style="display: block;" viewBox="0 0 24 24"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>
            </button>
            ` : ''}
          </div>
          <div class="fullscreen-overlay" id="fullscreen-overlay-${eventId}">
            <button class="close-button" onclick="closeFullscreen('${eventId}')" title="Close fullscreen">‚úï</button>
            <img class="fullscreen-image" id="fullscreen-image-${eventId}" src="" alt="Fullscreen Image">
          </div>
        `
        : '<p class="error-message">No images available for this event.</p>';

      const youtubeHtml = youtubeLinks.length > 0
        ? `
          <div class="event-youtube">
            <h3>Event Videos</h3>
            <div class="youtube-videos">
              ${youtubeLinks.map(link => {
                const videoIdMatch = link.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/);
                const videoId = videoIdMatch ? videoIdMatch[1] : null;
                if (!videoId) {
                  console.error('Invalid YouTube URL:', link);
                  return `<p class="error-message">Invalid YouTube URL: ${link}</p>`;
                }
                return `<iframe class="youtube-video" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
              }).join('')}
            </div>
          </div>
        `
        : '<p class="error-message" style="text-align:left; padding-left:0;">No videos available for this event.</p>';

      appContainer.innerHTML = `
        <div class="breadcrumb">
          <a onclick="navigateToEvents()">Events</a>
          <span>&gt;</span>
          <span>${event.event_name}</span>
        </div>
        <div class="event-details">
          <div class="event-details-banner" style="background-image: url('${event.cover_url || 'https://via.placeholder.com/1200x400?text=Event+Banner'}');">
            <div class="event-details-banner-content">
              <h3>${event.event_name}</h3>
              <div class="date-location">${new Date(event.date).toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' })} ‚Ä¢ ${event.location || 'Location TBD'}</div>
            </div>
          </div>
          <div class="event-details-content">
            ${carouselHtml}
            <p class="description">${event.description || 'No detailed description available for this event.'}</p>
            ${youtubeHtml}
          </div>
        </div>
      `;
      
      document.getElementById('back-button').addEventListener('click', () => {
        history.pushState({}, '', '/');
        router();
      });

      if (images.length > 0) {
        const carouselImages = document.querySelectorAll(`#event-carousel-${eventId} .carousel-image`);
        carouselImages.forEach(image => {
          image.addEventListener('click', () => openFullscreen(eventId, image.src));
        });
        if (images.length > 1) { // Only initialize carousel JS if there's more than one image
             initializeCarousel(eventId, images.length);
        }
      }
    }

    window.navigateToEvents = function() {
      history.pushState({}, '', '/');
      router();
    };

    const createRef = () => {
      let value = null;
      return {
        get current() { return value; },
        set current(newValue) { value = newValue; }
      };
    };

    const carouselStates = {};

    function initializeCarousel(eventId, imageCount) {
      const stateRef = createRef();
      stateRef.current = {
        currentIndex: 0,
        imageCount: imageCount,
        autoSwipeInterval: null,
        isPaused: false // Autoplay starts by default
      };
      carouselStates[eventId] = stateRef;

      const container = document.getElementById(`carousel-container-${eventId}`);
      if (!container) {
        console.error(`Carousel container not found for event ${eventId}`);
        return;
      }
      container.style.transform = 'translateX(0%)';
      
      toggleAutoplayButton(eventId, false); // Update button UI to show "pause" icon

      if (imageCount > 1) { // Only start autoplay if there's more than one image
          startAutoplay(eventId);
      }
    }

    function startAutoplay(eventId) {
      const stateRef = carouselStates[eventId];
      if (!stateRef || !stateRef.current) {
        // console.warn(`[${eventId}] Cannot start autoplay, stateRef or current is null.`);
        return;
      }
      const state = stateRef.current; // This is the state object this function will set an interval for.

      if (state.autoSwipeInterval !== null) {
        // console.log(`[${eventId}] Clearing existing interval ID in startAutoplay: ${state.autoSwipeInterval}`);
        clearInterval(state.autoSwipeInterval);
      }

      // Ensure imageCount is valid before setting interval
      if (state.imageCount <= 1) {
        state.isPaused = true; // No need to play if 0 or 1 image
        toggleAutoplayButton(eventId, true);
        return;
      }

      const newIntervalId = setInterval(() => {
        const currentGlobalStateRef = carouselStates[eventId];

        if (!currentGlobalStateRef || !currentGlobalStateRef.current || currentGlobalStateRef.current.autoSwipeInterval !== newIntervalId) {
          // console.log(`[${eventId}] Stale interval (${newIntervalId}) detected. Active: ${currentGlobalStateRef?.current?.autoSwipeInterval}. Clearing stale interval.`);
          clearInterval(newIntervalId);
          return;
        }

        const currentState = currentGlobalStateRef.current;
        if (currentState.isPaused || currentState.imageCount <=1) { // also check imageCount here
          return;
        }

        currentState.currentIndex = (currentState.currentIndex + 1) % currentState.imageCount;
        updateCarousel(eventId, currentState.currentIndex);
      }, 3000);

      state.autoSwipeInterval = newIntervalId;
      // console.log(`[${eventId}] Started new interval ID: ${state.autoSwipeInterval}`);
    }

    function updateCarousel(eventId, index) {
      const stateRef = carouselStates[eventId];
      if (!stateRef || !stateRef.current) return;

      const state = stateRef.current;
      // Validate index
      if (index < 0 || index >= state.imageCount) {
          // console.warn(`[${eventId}] Invalid index ${index} for imageCount ${state.imageCount}. Resetting to 0.`);
          index = 0; // Reset to a safe value
      }
      state.currentIndex = index;


      const container = document.getElementById(`carousel-container-${eventId}`);
      if (container) {
        container.style.transform = `translateX(-${state.currentIndex * 100}%)`;
      } else {
        // console.warn(`Carousel container not found for event ${eventId} during update`);
        return; // Early exit if container is gone
      }


      const thumbnails = document.querySelectorAll(`#carousel-thumbnails-${eventId} .thumbnail`);
      thumbnails.forEach((thumbnail, i) => {
        thumbnail.classList.toggle('active', i === state.currentIndex);
      });
    }

    window.moveCarousel = function(eventId, direction) {
      const stateRef = carouselStates[eventId];
      if (!stateRef || !stateRef.current || stateRef.current.imageCount <=1) return; // No move if 1 or less images

      const state = stateRef.current;
      
      state.isPaused = true; // Pause on manual navigation
      toggleAutoplayButton(eventId, true);

      if (state.autoSwipeInterval !== null) {
        // console.log(`[${eventId}] Clearing interval for manual navigation: ${state.autoSwipeInterval}`);
        clearInterval(state.autoSwipeInterval);
        state.autoSwipeInterval = null;
      }
      
      const newIndex = (state.currentIndex + direction + state.imageCount) % state.imageCount;
      updateCarousel(eventId, newIndex);
    };

    window.navigateToImage = function(eventId, index) {
      const stateRef = carouselStates[eventId];
      if (!stateRef || !stateRef.current || stateRef.current.imageCount <=1) return; // No move if 1 or less images

      const state = stateRef.current;

      state.isPaused = true; // Pause on thumbnail click
      toggleAutoplayButton(eventId, true);

      if (state.autoSwipeInterval !== null) {
        // console.log(`[${eventId}] Clearing interval for thumbnail navigation: ${state.autoSwipeInterval}`);
        clearInterval(state.autoSwipeInterval);
        state.autoSwipeInterval = null;
      }
      updateCarousel(eventId, index);
    };

    window.toggleAutoplay = function(eventId) {
      const stateRef = carouselStates[eventId];
      if (!stateRef || !stateRef.current || stateRef.current.imageCount <=1) return; // No toggle if 1 or less images

      const state = stateRef.current;
      state.isPaused = !state.isPaused;
      toggleAutoplayButton(eventId, state.isPaused);

      if (!state.isPaused) {
        startAutoplay(eventId); // This will handle clearing old and starting new
      } else {
        if (state.autoSwipeInterval !== null) {
          // console.log(`[${eventId}] Clearing interval due to pause toggle: ${state.autoSwipeInterval}`);
          clearInterval(state.autoSwipeInterval);
          state.autoSwipeInterval = null;
        }
      }
    };

    function toggleAutoplayButton(eventId, isPaused) {
      const button = document.getElementById(`autoplay-button-${eventId}`);
      if (!button) return;

      const playIcon = button.querySelector('.play-icon');
      const pauseIcon = button.querySelector('.pause-icon');

      if (!playIcon || !pauseIcon) {
        // console.error("Play/Pause icons not found in autoplay button for event", eventId);
        return;
      }

      if (isPaused) { // Autoplay is OFF, button should show "Play" action
        button.classList.add('paused');
        playIcon.style.display = 'block';
        pauseIcon.style.display = 'none';
        button.title = "Start Autoplay";
      } else { // Autoplay is ON, button should show "Pause" action
        button.classList.remove('paused');
        playIcon.style.display = 'none';
        pauseIcon.style.display = 'block';
        button.title = "Pause Autoplay";
      }
    }

    window.openFullscreen = function(eventId, src) {
      const overlay = document.getElementById(`fullscreen-overlay-${eventId}`);
      const fullscreenImage = document.getElementById(`fullscreen-image-${eventId}`);
      if (overlay && fullscreenImage) {
        fullscreenImage.src = src;
        overlay.style.display = 'flex';
      }
    };

    window.closeFullscreen = function(eventId) {
      const overlay = document.getElementById(`fullscreen-overlay-${eventId}`);
      if (overlay) {
        overlay.style.display = 'none';
        document.getElementById(`fullscreen-image-${eventId}`).src = ""; // Clear src
      }
    };

    window.addEventListener('popstate', router);
    router(); // Initial render
  </script>
</body>
</html>